ApplyAndJoin[fn_, count_] := (Flatten[Map[fn, Range[count]]])
(*Vyber naslednosti tonu*)

ChooseTone[previous_, weights_, toneWeights_, toneImportance_, 
  jumpBar_] := (allTones = 
   Range[-Length[weights] + 1 + previous, 
    Length[weights] - 1 + previous];
  allIntervalWeights = Join[Reverse[Drop[weights, 1]], weights];
  allToneWeights = 
   Map[Function[t, 
     Part[toneWeights, Mod[t, Length[toneWeights]] + 1]], allTones];
  totalWeights = (allToneWeights*allIntervalWeights)^toneImportance;
  Label[genNewTone];
  tone = Part[RandomSample[totalWeights -> allTones, 1], 1];
  If[RandomReal[] > 
    CDF[NormalDistribution[0, 0.1]][
     jumpBar - Abs[tone - previous]], (Goto[genNewTone])];
  If[(Abs[tone] > Abs[previous]) && (RandomReal[] < 
      CDF[NormalDistribution[0, 3]][
         Abs[tone]/Length[toneWeights]]*2 - 1), (
    Goto[genNewTone])];
  (*introduce interval*)
  
  If[RandomReal[] < 
    toneImportance - 
     3, (tone = {tone, tone + 3*Sign[tone - previous]})]; 
  Return[tone];)
(*Vytvareni dilku hudby*)

GetMelody[rythm_, weights_, 
  toneWeights_] := (melody = {RandomSample[{0, 3, 5}][[1]]};
  jumpBar = 2;
  For[i = 1, i < Length[rythm], 
   i++, (previous = Flatten[{melody[[i]]}][[1]];
    next = 
     ChooseTone[previous, weights, toneWeights, rythm[[i]] + 1, 
      jumpBar];
    AppendTo[melody, next];)];
  Return[melody];)

GetTact[divCoef_, 
  recursionCoef_] := (If[
   RandomReal[] > divCoef, (Return[{1}]), (divLen[e_] := e/2;
    Return[
     Map[divLen, 
      Join[GetTact[divCoef/recursionCoef, recursionCoef], 
       GetTact[divCoef/recursionCoef, recursionCoef]]]];)])


GetRythm[divCoef_, baseRecursionCoef_, size_] := (
  Return[ApplyAndJoin[
     Function[i, 
      GetTact[If[size == i + 1, 1.7, 
        If[size == i, 1.3, divCoef - Abs[i - size /2] / 10]], 
       If[i == size, 3.7, baseRecursionCoef + Abs[i - size / 2] /3]]],
      size]];
  )

GetPatterns[weights_, toneWeights_, size_, 
  count_] := (rythm = GetRythm[2.1, 2.0, size];
  Return[Map[
    Function[i, 
     Transpose[{rythm, GetMelody[rythm, weights, toneWeights]}]], 
    Range[count]]];)

GetFlags[pattern_] := (
  flags = {};
  If[pattern[[Length[pattern], 2]] > pattern[[1, 2]] + 5, 
   flags = Join[flags, {"ascending"}];];
  If[pattern[[Length[pattern], 2]] < pattern[[1, 2]] - 5, 
   flags = Join[flags, {"descending"}];];
  average = 0;
  For[m = 0, m < Length[pattern], m++, 
   average += pattern[[m + 1, 2]]/Length[pattern];];
  If[average > 8, flags = Join[flags, {"high"}];];
  If[average < -8, flags = Join[flags, {"low"}];];
  fastest = 1;
  slowest = 0;
  For[m = 0, m < Length[pattern], m++, (
    If[pattern[[m + 1, 1]] > slowest, 
     slowest = pattern[[m + 1, 1]] ];
    If[pattern[[m + 1, 1]] < fastest, 
     fastest = pattern[[m + 1, 1]] ];
    )];
  If[slowest < 1/4, flags = Join[flags, {"fast"}];];
  If[fastest >= 1/4, flags = Join[flags, {"slow"}];];
  For[m = 1, m < Length[pattern], m++, (
    If[pattern[[m, 1]] < pattern[[m + 1, 1]], Break[];];
    If[m == Length[pattern] - 1, flags = Join[flags, {"slowing"}];];
    )];
  For[m = 1, m < Length[pattern], m++, (
    If[pattern[[m, 1]] > pattern[[m + 1, 1]], Break[];];
    If[m == Length[pattern] - 1, flags = Join[flags, {"speeding"}];];
    )];
  Return[flags];
  )
(*Generace Hudby*)

CreateMusic[tones_, weights_, toneWeights_, params_] := (music = {};
  patterns = {};
  patternacces = ConstantArray[1, {params[[2]], params[[2]]}];
  flags = {};
  While[Length[patterns] < params[[2]], (
    pattern = 
     GetPatterns[weights, toneWeights, 
      RandomSample[params[[3]], 1][[1]], RandomInteger[{4, 12}]];
    oldLen = Length[patterns];
    While[Length[patterns] + Length[pattern] > params[[2]], 
     pattern = Drop[pattern, -1]];
    patterns = Join[patterns, pattern];
    For[i = oldLen + 1, i <= Length[patterns], i++, (
      For[j = oldLen + 1, j <= Length[patterns], j++, (
        patternacces[[i, j]] = 10;
        )];
      flags = Append[flags, GetFlags[patterns[[i]]]];
      )];
    )];
  pPos = 1;
  For[i = 0, i < params[[1]], 
   i++, (For[j = 0, j < Length[patterns[[pPos]]], 
     j++, (toneOffset = patterns[[pPos, j + 1, 2]];
      tone = 
       Part[tones, 
         1 + Mod[toneOffset, Length[tones]]] + (Floor[
           toneOffset/Length[tones]]*12);
      sound = {tone, patterns[[pPos, j + 1, 1]]*1.5, "Piano"};
      AppendTo[music, sound];
      )];
    findFlags = {};
    patternFlag = {};
    For[j = 1, j <= Length[patternacces], j++, 
     patternFlag = 
      AppendTo[patternFlag, 
       0.01 + Length[Intersection[findFlags, flags[[j]] ]]];(*Print[
     flags[[j]]];*)];
    pPos = 
     RandomSample[
       patternFlag*patternacces[[pPos]] -> Range[1, params[[2]]]][[1]];
    )];
  Return[music];
  )

GenSound[music_] := (soundNoteList[list_] := Apply[SoundNote, list];
  generated = Map[soundNoteList, music];
  sound = Sound[generated];
  Return[sound];)
(*Nastaveni parametru*)

tones = {0, 2, 3, 5, 7, 8, 10} + 0;
weights = {1, 5, 5, 3, 3, 0.7, 0.7, 1.2, 1};
toneWeights = {1.7, 1.5, 1.6, 1, 1.6, 1.5, 1};
(*tones={0,1,4,5,7,8,11}+0;
weights={1,5,5,3,3,0.7,0.7,1.2,1};
toneWeights={1.7,1.5,1.6,1,1.6,1.5,1};*)
(*tones={0,2,3,6,7,8,11}+0;
weights={1,5,5,3,3,0.7,0.7,1.2,1};
toneWeights={1.7,1.5,1.6,1,1.6,1.5,1};*)
(*length patterns pLens*)

params = {20, 10, {2}};

(*Spousteni*)

GenSound[CreateMusic[tones, weights, toneWeights, params]]

(*CmpM[rtm_]:=GetMelody[rtm,weights,toneWeights];
mainM=CmpM[rtm2];
melody1=Join[CmpM[rtm1],ReplacePart[mainM,Length[rtm2]\[Rule]4],CmpM[\
rtm1],ReplacePart[mainM,Length[rtm2]\[Rule]0]];
mainM=CmpM[rtm1];
melody2=Join[CmpM[rtm2],ReplacePart[mainM,Length[rtm1]\[Rule]4],CmpM[\
rtm2],ReplacePart[mainM,Length[rtm1]\[Rule]0]];
GenSound[CreateMusic[Join[melody1,melody2,melody1+3,melody2-4],tones,\
ApplyAndJoin[Function[i,Join[rtm1,rtm2,rtm1,rtm2,rtm2,rtm1,rtm2,rtm1]]\
,2]]]*)
