(*Obecne funkce*)
ApplyAndJoin[fn_, count_] := (Flatten[Map[fn, Range[count]]])
(*Vyber naslednosti tonu*)

ChooseTone[previous_, weights_, toneWeights_, toneImportance_, 
  jumpBar_] := (allTones = 
   Range[-Length[weights] + 1 + previous, 
    Length[weights] - 1 + previous];
  allIntervalWeights = Join[Reverse[Drop[weights, 1]], weights];
  allToneWeights = 
   Map[Function[t, 
     Part[toneWeights, Mod[t, Length[toneWeights]] + 1]], allTones];
  totalWeights = (allToneWeights*allIntervalWeights)^toneImportance;
  Label[genNewTone];
  tone = Part[RandomSample[totalWeights -> allTones, 1], 1];
  If[RandomReal[] > 
    CDF[NormalDistribution[0, 0.1]][
     jumpBar - Abs[tone - previous]], (Goto[genNewTone])];
  If[(Abs[tone] > Abs[previous]) && (RandomReal[] < 
      CDF[NormalDistribution[0, 3]][
         Abs[tone]/Length[toneWeights]]*2 - 1), (Goto[genNewTone])];
  (*introduce interval*)
  If[RandomReal[] < (toneImportance - 2.5)^1, (tone = {tone, 
      tone + 
       Mod[RandomSample[{2.6, 1, 
              3}*(toneWeights[[
                Mod[tone + {3, 4, 5}, Length[toneWeights]] + 
                 1]]^3) -> {3, 4, 5}][[1]]*Sign[tone - previous], 
        Length[toneWeights]] - 12})];
  Return[tone];)
(*Vytvareni dilku hudby*)

GetMelody[rythm_, weights_, toneWeights_, 
  flag_] := (melody = {RandomSample[{0, 3, 5}][[1]]};
  jumpBar = 2;
  For[u = 1, u < Length[rythm], 
   u++, (previous = Flatten[{melody[[u]]}][[1]];
    next = 
     ChooseTone[previous, weights, toneWeights, rythm[[u]] + 1, 
      jumpBar];
    AppendTo[melody, next];)];
  If[flag == 
    "low", (For[u = 1, u <= Length[rythm], 
      u++, (melody[[u]] -= 8;)];)];
  If[flag == 
    "high", (For[u = 1, u <= Length[rythm], 
      u++, (melody[[u]] += 8;)];)];
  Return[melody];)

GetTact[divCoef_, 
  recursionCoef_] := (If[
    RandomReal[] > divCoef, (Return[{1}]), (divLen[e_] := e/2;
     Return[
      Map[divLen, 
       Join[GetTact[divCoef/recursionCoef, recursionCoef], 
        GetTact[divCoef/recursionCoef, recursionCoef]]]];)];)


GetRythm[divCoef_, baseRecursionCoef_, 
  size_] := (Return[
    ApplyAndJoin[Function[i, GetTact[divCoef, baseRecursionCoef]], 
     size]];)

GetFlags[pattern_] := (flgs = {};
  If[pattern[[Length[pattern], 2]] > pattern[[1, 2]] + 5, 
   flgs = Join[flgs, {"ascending"}];];
  If[pattern[[Length[pattern], 2]] < pattern[[1, 2]] - 5, 
   flgs = Join[flgs, {"descending"}];];
  average = 0;
  For[m = 0, m < Length[pattern], m++, 
   average += pattern[[m + 1, 2]]/Length[pattern];];
  If[average > 8, flgs = Join[flgs, {"high"}];];
  If[average < -8, flgs = Join[flgs, {"low"}];];
  If[average >= -8 && average <= 8, flgs = Join[flgs, {"nHight"}];];
  fastest = 1;
  slowest = 0;
  For[m = 0, m < Length[pattern], 
   m++, (If[pattern[[m + 1, 1]] > slowest, 
     slowest = pattern[[m + 1, 1]]];
    If[pattern[[m + 1, 1]] < fastest, 
     fastest = pattern[[m + 1, 1]]];)];
  If[slowest < 1/4, flgs = Join[flgs, {"fast"}];];
  If[fastest >= 1/4, flgs = Join[flgs, {"slow"}];];
  If[fastest >= 1/16 && slowest <= 1/4, 
   flgs = Join[flgs, {"nSpeed"}];];
  For[m = 1, m < Length[pattern], 
    m++, (If[pattern[[m, 1]] < pattern[[m + 1, 1]], Break[];];
     If[m == Length[pattern] - 1 && pattern[[m + 1, 1]] >= 1/4, 
      flgs = Join[flgs, {"slowing"}];];)] For[m = 1, 
    m < Length[pattern], 
    m++, (If[pattern[[m, 1]] > pattern[[m + 1, 1]], Break[];];
     If[m == Length[pattern] - 1, flgs = Join[flgs, {"speeding"}];];)];
  Return[flgs];)

GetPatterns[weights_, toneWeights_, size_, count_, 
  dflags_] := (rythm = GetRythm[2.1, 2.3, size];
  patt = Transpose[{rythm, 
     GetMelody[rythm, weights, toneWeights, ""]}];
  patts = {};
  flag = GetFlags[patt];
  While[Length[
     Intersection[
      flag, {"slowing", "speeding", "nSpeed", "slow", "fast"}, 
      dflags]] != 
    Length[Intersection[{"slowing", "speeding", "nSpeed", "slow", 
       "fast"}, dflags]], (rythm = GetRythm[2.1, 2.3, size];
    If[1 == 
      Length[Intersection[{"slow"}, dflags]], (rythm = 
        GetRythm[1.5, 2.3, size];)];
    If[1 == 
      Length[Intersection[{"fast"}, dflags]], (rythm = 
        GetRythm[3.1, 2.3, size];)];
    If[1 == 
      Length[Intersection[{"nSpeed"}, dflags]], (rythm = 
        GetRythm[9, 3, size];)];
    patt = 
     Transpose[{rythm, GetMelody[rythm, weights, toneWeights, ""]}];
    flag = GetFlags[patt];
    (*Print[flag];*))];
  For[p = 0, p < size, 
   p++, (patt = 
     Transpose[{rythm, GetMelody[rythm, weights, toneWeights, {}]}];
    flag = GetFlags[patt];
    While[
     Length[Intersection[flag, dflags]] != 
      Length[dflags], (patt = 
       Transpose[{rythm, 
         GetMelody[rythm, weights, toneWeights, ""]}];
      If[1 == 
        Length[Intersection[{"low"}, dflags]], (patt = 
          Transpose[{rythm, 
            GetMelody[rythm, weights, toneWeights, "low"]}];)];
      If[1 == Length[Intersection[{"high"}, dflags]], 
       patt = Transpose[{rythm, 
           GetMelody[rythm, weights, toneWeights, "high"]}];];
      flag = GetFlags[patt];)];
    patts = AppendTo[patts, patt];)];
  Return[patts];)

RateChord[tone_, chord_, intervalWeights_] := 
  Total[Map[
    Function[tt, 
     intervalWeights[[
      Mod[Abs[tone - tt], Length[intervalWeights]] + 1]]], chord]];

DetectHarmony[melody_, toneWeights_, 
  intervalWeights_] := (chords =(*{{0,2,4},{3,5,7},{4,6,8}}*)
   Map[Function[i, {0, 2, 4} + i], 
    Range[0, Length[toneWeights] - 2]];
  weightedChords = 
   Map[Function[t, 
     Map[Function[ch, RateChord[t[[1]], ch, intervalWeights]], 
      chords]], melody];
  currentLen = 0;
  tactW = Map[Function[i, 0], chords];
  result = {};
  For[i = 1, i <= Length[melody], 
   i++, (tactW = tactW + weightedChords[[i]]*melody[[i]][[2]];
    currentLen = currentLen + melody[[i]][[2]];
    If[currentLen > 1.5 || 
      i == Length[melody], (AppendTo[result, 
       Flatten[MaximalBy[MapIndexed[Function[{e, i}, {e, i}], tactW], 
           Function[i, i[[1]]]][[1]]][[2]]];
      currentLen -= 1.5;
      tactW = tactW*0;)])];
  Return[Map[Function[i, chords[[i]]], result]];)

(*Generace Hudby*)

MapTone[tones_, toneOffset_] := 
 Part[tones, 
   1 + Mod[toneOffset, Length[tones]]] + (Floor[
     toneOffset/Length[tones]]*12)
CreateMusic[tones_, weights_, toneWeights_, params_] := (music = {};
  patterns = {};
  patternacces = ConstantArray[1, {params[[2]], params[[2]]}];
  flags = {};
  dflags = {{"nSpeed", "descending"}, {"low", "slow"}, {"low", 
     "slow"}, {"nSpeed"}, {"slow"}, {"fast"}, {"low"}};
  For[n = 1, Length[patterns] < params[[2]], 
   n++, (If[n <= 3, 
     pattern = 
       GetPatterns[weights, toneWeights, 
        RandomSample[params[[3]], 1][[1]], 1, dflags[[n]]];];
    If[n <= 7 && n > 3, 
     pattern = 
       GetPatterns[weights, toneWeights, 
        RandomSample[params[[3]], 1][[1]], RandomInteger[{2, 10}], 
        dflags[[n]]];];
    If[n > 7, 
     pattern = 
       GetPatterns[weights, toneWeights, 
        RandomSample[params[[3]], 1][[1]], 
        RandomInteger[{4, 12}], {}];];
    oldLen = Length[patterns];
    While[Length[patterns] + Length[pattern] > params[[2]], 
     pattern = Drop[pattern, -1]];
    patterns = Join[patterns, pattern];
    For[i = oldLen + 1, i <= Length[patterns], 
     i++, (For[j = oldLen + 1, j <= Length[patterns], 
        j++, (patternacces[[i, j]] = 10;)];)];)];
  pPos = 1;
  level = 0;
  For[la = 1, la <= Length[patterns], 
   la++, (flags = AppendTo[flags, GetFlags[patterns[[la]]]];)];
  For[i = 0, i < params[[1]], 
   i++, (If[i > 0, 
     For[j = 0, j < Length[patterns[[pPos]]], 
       j++, (toneOffset = patterns[[pPos, j + 1, 2]];
        tone = MapTone[tones, toneOffset];
        sound = {tone, patterns[[pPos, j + 1, 1]]*1.5, "Piano"};
        AppendTo[music, sound];
        )];];
    If[i >= params[[1]]/5 && RandomReal[] > 0.8 && level <= 0, 
     level = 1];
    If[i >= params[[1]]/3 && RandomReal[] > 0.8 && level <= 1, 
     level = 2];
    If[i == params[[1]] - 3, level = 3];
    If[i == params[[1]] - 2, level = 4];
    findFlags = {};
    patternFlag = {};
    If[level == 0, findFlags = Append[findFlags, "slow"]];
    If[level == 1, findFlags = Append[findFlags, "nSpeed"]];
    If[level <= 1, findFlags = Append[findFlags, "nHight"]];
    If[level == 3, findFlags = Append[findFlags, "nSpeed"]];
    If[level == 3, findFlags = Append[findFlags, "descending"]];
    If[level == 4, findFlags = Append[findFlags, "low"]];
    If[level == 4, findFlags = Append[findFlags, "slow"]];
    For[j = 1, j <= Length[patternacces], j++, 
     patternFlag = 
       AppendTo[patternFlag , 
        0.01 + Length[Intersection[findFlags, flags[[j]]]]^10];];
    (*Print[patternFlag];*)
    
    pPos = RandomSample[
       patternFlag*patternacces[[pPos]] -> Range[1, params[[2]]]][[
      1]];)];
  (*Print[flags];
  Print[patterns];
  For[j=0,j<Length[patterns[[pPos]]],j++,(toneOffset=patterns[[pPos,
  j+1,2]];
  tone=MapTone[tones,toneOffset];
  sound={tone,patterns[[pPos,j+1,1]]*3,"Piano"};
  AppendTo[music,sound];
  )];*)
  sound = {tone, 1 + 1*RandomReal[], "Piano"};
  AppendTo[music, sound];
  sound = {tone, 1 + 1*RandomReal[], "Piano"};
  AppendTo[music, sound];
  sound = {tone, 3 + 3*RandomReal[], "Piano"};
  AppendTo[music, sound];
  Return[music];)

JoinVoices[voices_] := (
  Return[Flatten[Map[Function[voice, (time = 0;
        Map[
         Function[
          note, {note[[1]], {time, time += note[[2]]}, note[[3]], 
           If[Length[note] > 3, note[[4]], 1]}], voice])], voices], 
     1]];)

MoreInstruments[music_] := (
  betterMusic = {};
  timeMusic = 1;
  For[i = 1, i <= Length[music], i++, (
    x = {timeMusic, timeMusic + music[[i, 2]]};
    betterMusic = 
     AppendTo[betterMusic, {music[[i, 1]], x, "Violin", 1}];
    betterMusic = 
     AppendTo[betterMusic, {music[[i, 1]], x, "Trombone", 1}];
    betterMusic = 
     AppendTo[betterMusic, {music[[i, 1]], x, "Flute", 1}];
    timeMusic += music[[i, 2]];
    )];
  Print[timeMusic];
  Return[betterMusic];
  )

GenSound[music_] := (soundNoteList[list_] := 
   SoundNote[list[[1]], list[[2]], list[[3]], 
    SoundVolume -> list[[4]]];
  generated = Map[soundNoteList, music];
  sound = Sound[generated];
  Return[sound];)
(*Nastaveni parametru*)

tones = {0, 2, 3, 5, 7, 8, 10} + 0;
weights = {1, 5, 5, 3, 3, 0.7, 0.7, 1.2, 1};
toneWeights = {1.7, 1.5, 1.6, 1, 1.6, 1.5, 1};
(*tones={0,1,4,5,7,8,11}+0;
weights={1,5,5,3,3,0.7,0.7,1.2,1};
toneWeights={1.7,1.5,1.6,1,1.6,1.5,1};*)
(*tones={0,2,3,6,7,8,11}+0;
weights={1,5,5,3,3,0.7,0.7,1.2,1};
toneWeights={1.7,1.5,1.6,1,1.6,1.5,1};*)

(*length patterns pLens*)
params = {20, 50, {4}};

(*Spousteni*)

music = CreateMusic[tones, weights, toneWeights, params];
(*Print[music];*)

harmony = DetectHarmony[music, toneWeights, {5, 1, 3, 2, 4, 1, 1}];
Print[harmony];
leftHand = 
  Map[Function[
    chord, {Map[Function[t, MapTone[tones, t]], chord - 8], 1.5, 
     "Piano", 1}], harmony];
leftHand[[Length[leftHand]]][[2]] = 4.5;
leftHand2 = 
  Map[Function[
    chord, {Map[Function[t, MapTone[tones, t]], chord - 16], 1.5, 
     "Contrabass", 0.8}], harmony];
leftHand2[[Length[leftHand2]]][[2]] = 4.5;
leftHand3 = 
  Map[Function[
    chord, {Map[Function[t, MapTone[tones, t]], chord - 8], 1.5, 
     "Organ", 0.4}], harmony];
leftHand3[[Length[leftHand3]]][[2]] = 4.5;
leftHand3 = 
  Map[Function[
    chord, {Map[Function[t, MapTone[tones, t]], chord - 8], 1.5, 
     "Tuba", 0.8}], harmony];
leftHand3[[Length[leftHand3]]][[2]] = 4.5;
mainMusic = MoreInstruments[music];
GenSound[mainMusic]
GenSound[music]
GenSound[Join[JoinVoices[{(*leftHand,*)leftHand2, leftHand3}], 
  mainMusic]]
GenSound[JoinVoices[{leftHand, music}]]
Export["magicHappened.mid", 
 GenSound[JoinVoices[{music, 
    Map[Function[
      chord, {Map[Function[t, MapTone[tones, t]], chord - 8], 1.5, 
       "Piano", 0.7}], harmony]}]]]
(*GenSound[JoinVoices[{Map[Function[chord,{Map[Function[t,MapTone[\
tones,t]],chord-8],0.5,"Piano",1}],chords]}]]

*)
(*CmpM[rtm_]:=GetMelody[rtm,weights,toneWeights];
mainM=CmpM[rtm2];
melody1=Join[CmpM[rtm1],ReplacePart[mainM,Length[rtm2]\[Rule]4],CmpM[\
rtm1],ReplacePart[mainM,Length[rtm2]\[Rule]0]];
mainM=CmpM[rtm1];
melody2=Join[CmpM[rtm2],ReplacePart[mainM,Length[rtm1]\[Rule]4],CmpM[\
rtm2],ReplacePart[mainM,Length[rtm1]\[Rule]0]];
GenSound[CreateMusic[Join[melody1,melody2,melody1+3,melody2-4],tones,\
ApplyAndJoin[Function[i,Join[rtm1,rtm2,rtm1,rtm2,rtm2,rtm1,rtm2,rtm1]]\
,2]]]*)
