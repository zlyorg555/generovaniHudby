(*Obecne funkce*)
ApplyAndJoin[fn_, count_] := (Flatten[Map[fn, Range[count]]])
(*Vyber naslednosti tonu*)

ChooseTone[previous_, weights_, toneWeights_, toneImportance_, 
  jumpBar_] := (
  allTones = 
   Range[-Length[weights] + 1 + previous, 
    Length[weights] - 1 + previous];
  allIntervalWeights = Join[Reverse[Drop[weights, 1]], weights];
  allToneWeights = 
   Map[Function[t, 
     Part[toneWeights, Mod[t, Length[toneWeights]] + 1]], allTones];
  totalWeights = (allToneWeights*allIntervalWeights)^toneImportance;
  Label[genNewTone];
  tone = Part[RandomSample[totalWeights -> allTones, 1], 1];
  If[RandomReal[] < 
    CDF[NormalDistribution[0, 0.1]][
     Abs[tone - previous] - jumpBar], (Goto[genNewTone])];
  Return[tone];)
(*Vytvareni dilku hudby*)

GetMelody[rythm_, weights_, toneWeights_] := (
  melody = {0};
  jumpBar = 6;
  For[i = 1, i < Length[rythm], i++, (
    previous = melody[[i]];
    next = 
     ChooseTone[previous, weights, toneWeights, rythm[[i]] + 1, 
      jumpBar];
    jumpBar = Max[jumpBar, 100] - Abs[next - previous] + 0;
    AppendTo[melody, next];
    )];
  Return[melody];
  )

GetTact[divCoef_, recursionCoef_] := (
  If[RandomReal[] > divCoef, (Return[{1}]), (
    divLen[e_] := e/2;
    Return[
     Map[divLen, 
      Join[GetTact[divCoef/recursionCoef, recursionCoef], 
       GetTact[divCoef/recursionCoef, recursionCoef]]]];
    )]
  )

GetRythm[divCoef_, recursionCoef_, size_] := 
 ApplyAndJoin[Function[i, GetTact[divCoef, recursionCoef]], size]
(*
GetPatterns[weights_,toneWeights_,size_,count_]:=(rythm=GetRythm[2.\
3,2,size];
Return[Map[Function[i,Transpose[{rythm,GetMelody[rythm,weights,\
toneWeights]}]],rythm]];)
*)

GetPatterns[weights_, toneWeights_, size_, count_] := (
  rythm = GetRythm[2.3, 2, size];
  Return[Map[
    Function[i, 
     Transpose[{rythm, GetMelody[rythm, weights, toneWeights]}]], 
    Range[count]]];
  )

(*Generace Hudby*)

CreateMusic[tones_, weights_, toneWeights_, params_] := (music = {};
  patterns = {};
  patternacces = ConstantArray[1, {params[[2]], params[[2]]}];
  While[Length[patterns] < params[[2]], (
    pattern = 
     GetPatterns[weights, toneWeights, 
      RandomSample[params[[3]], 1][[1]], RandomInteger[{4, 12}]];
    If[Length[patterns] + Length[pattern] > params[[2]], 
     pattern = 
      Drop[pattern, params[[2]] - Length[patterns] - Length[pattern]]];
    patterns = Join[patterns, pattern];
    for[i = Length[patterns] - Length[pattern] + 1, 
     i <= Length[patterns], i++, (
      for[j = Length[patterns] - Length[pattern] + 1, 
        j <= Length[patterns], j++, (
         patternacces[[i]][[j]] = 10;
         )];
      )];
    )];
  pPos = 1;
  For[i = 0, i < params[[1]], 
   i++, (For[j = 0, j < Length[patterns[[pPos]]], j++, (
      toneOffset = patterns[[pPos, j + 1, 2]];
      tone = 
       Part[tones, 
         1 + Mod[toneOffset, Length[tones]]] + (Floor[
           toneOffset/Length[tones]]*12);
      sound = {tone, patterns[[pPos, j + 1, 1]]*1.5, "Piano"};
      AppendTo[music, sound];
      )];
    pPos = 
     RandomSample[
       patternacces[[pPos]] -> Range[1, params[[2]]]][[1]];)];
  Return[music];
  )

GenSound[music_] := (
  soundNoteList[list_] := Apply[SoundNote, list];
  generated = Map[soundNoteList, music];
  sound = Sound[generated];
  Return[sound];
  )
(*Nastaveni parametru*)

tones = {0, 2, 3, 5, 7, 8, 10} + 0;
weights = {1, 5, 5, 3, 3, 0.7, 0.7, 1.2, 1};
toneWeights = {1.7, 1.5, 1.6, 1, 1.6, 1.5, 1};
(*length patterns pLens*)
params = {20, 50, {1}};

(*Spousteni*)

GenSound[CreateMusic[tones, weights, toneWeights, params]]

(*CmpM[rtm_]:=GetMelody[rtm,weights,toneWeights];
mainM=CmpM[rtm2];
melody1=Join[CmpM[rtm1],ReplacePart[mainM,Length[rtm2]\[Rule]4],CmpM[\
rtm1],ReplacePart[mainM,Length[rtm2]\[Rule]0]];
mainM=CmpM[rtm1];
melody2=Join[CmpM[rtm2],ReplacePart[mainM,Length[rtm1]\[Rule]4],CmpM[\
rtm2],ReplacePart[mainM,Length[rtm1]\[Rule]0]];
GenSound[CreateMusic[Join[melody1,melody2,melody1+3,melody2-4],tones,\
ApplyAndJoin[Function[i,Join[rtm1,rtm2,rtm1,rtm2,rtm2,rtm1,rtm2,rtm1]]\
,2]]]*)